Docker/containers are important for a few reasons - 
1.Kubernetes/Container orchestration
2.Running processes in isolated environments
3.Starting projects/auxilary services locally

Containers:
Containers are a way to package and distribute software applications in a way that makes them easy to deploy and run consistently across different environments. They allow you to package an application, along with all its dependencies and libraries, into a single unit that can be run on any machine with a container runtime, such as Docker. Docker isnt the only way to make containers.

Why Containers?
1.Everyone has different Operating systems
2.Steps to run a project can vary based on OS
3.Extremely harder to keep track of dependencies as project grows

Benefits of containers:
1.Let you describe your configuration in a single file
2.Can run in isolated environments
3.Makes Local setup of OS projects a breeze
4.Makes installing auxiliary services/DBs easy

Inside docker:
As an application/full stack developer, you need to be comfortable with the following terminologies -

1.Docker Engine- Docker Engine is an open-source containerization technology that allows developers to package applications into container. Containers are standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment.

2.Docker CLI- The command line interface lets you talk to the docker engine and lets you start/stop/list containers

3.Docker registry- The docker registry is how Docker makes money. 
It is similar to github, but it lets you push images rather than sourcecode
Docker’s main registry - https://dockerhub.com/
Mongo image on docker registry - https://hub.docker.com/_/mongo

Docker Image
A Docker image is a lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.
Docker Container
A container is a running instance of an image. It encapsulates the application or service and its dependencies, running in an isolated environment.

Port mapping- eg.docker run -d -p 27018:27017 mongo

Common docker commands-
1.docker images- shows all the images you have on your machine
2.docker ps-shows all the containers you are running on your machine
3.docker run- lets you start a container
4.docker build- lets you build an image
5.docker push- lets you push your image to a registry
6.docker kill and docker exec

In order to delete an image eg. mongo, do docker rmi mongo --force

What is a Dockerfile
If you want to create an image from your own code, that you can push to dockerhub, you need to create a Dockerfile for your application.
A Dockerfile is a text document that contains all the commands a user could call on the command line to create an image.
How to write a dockerfile
A dockerfile has 2 parts
Base image
Bunch of commands that you run on the base image (to install dependencies like Node.js)
Let’s write our own Dockerfile
Let’s try to containerise this backend app - https://github.com/100xdevs-cohort-2/week-15-live-1

Layers in docker:
In Docker, layers are a fundamental part of the image architecture that allows Docker to be efficient, fast, and portable. A Docker image is essentially built up from a series of layers, each representing a set of differences from the previous layer.

How layers are made - 
Base Layer: The starting point of an image, typically an operating system (OS) like Ubuntu, Alpine, or any other base image specified in a Dockerfile.

Instruction Layers: Each command in a Dockerfile creates a new layer in the image. These include instructions like RUN, COPY, which modify the filesystem by installing packages, copying files from the host to the container, or making other changes. Each of these modifications creates a new layer on top of the base layer.

Reusable & Shareable: Layers are cached and reusable across different images, which makes building and sharing images more efficient. If multiple images are built from the same base image or share common instructions, they can reuse the same layers, reducing storage space and speeding up image downloads and builds.

Immutable: Once a layer is created, it cannot be changed. If a change is made, Docker creates a new layer that captures the difference. This immutability is key to Docker's reliability and performance, as unchanged layers can be shared across images and containers.

If there is a change in a layer, the layers below it will also need to be recached.

Networks and volumes:
Networks and volumes are concepts that become important when you have multiple containers running in which you
1.Need to persist data across docker restarts(usually what happens is eg. if you start a mongo container , when you kill that container and restart it, all data will also be lost. This is because docker containers are transitory ie they dont retain data across restarts. To solve this we use volumes)
2.Need to allow containers to talk to each other. For this we use networks

We didn’t need networks until now because when we started the mongo container, it was being accessed by a Node.js process running directly on the machine.

