Docker/containers are important for a few reasons - 
1.Kubernetes/Container orchestration
2.Running processes in isolated environments
3.Starting projects/auxilary services locally

Containers:
Containers are a way to package and distribute software applications in a way that makes them easy to deploy and run consistently across different environments. They allow you to package an application, along with all its dependencies and libraries, into a single unit that can be run on any machine with a container runtime, such as Docker. Docker isnt the only way to make containers.

Why Containers?
1.Everyone has different Operating systems
2.Steps to run a project can vary based on OS
3.Extremely harder to keep track of dependencies as project grows

Benefits of containers:
1.Let you describe your configuration in a single file
2.Can run in isolated environments
3.Makes Local setup of OS projects a breeze
4.Makes installing auxiliary services/DBs easy

Inside docker:
As an application/full stack developer, you need to be comfortable with the following terminologies -

1.Docker Engine- Docker Engine is an open-source containerization technology that allows developers to package applications into container. Containers are standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment.

2.Docker CLI- The command line interface lets you talk to the docker engine and lets you start/stop/list containers

3.Docker registry- The docker registry is how Docker makes money. 
It is similar to github, but it lets you push images rather than sourcecode
Dockerâ€™s main registry - https://dockerhub.com/
Mongo image on docker registry - https://hub.docker.com/_/mongo

