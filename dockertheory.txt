Docker/containers are important for a few reasons - 
1.Kubernetes/Container orchestration
2.Running processes in isolated environments
3.Starting projects/auxilary services locally

Containers:
Containers are a way to package and distribute software applications in a way that makes them easy to deploy and run consistently across different environments. They allow you to package an application, along with all its dependencies and libraries, into a single unit that can be run on any machine with a container runtime, such as Docker. Docker isnt the only way to make containers.

Why Containers?
1.Everyone has different Operating systems
2.Steps to run a project can vary based on OS
3.Extremely harder to keep track of dependencies as project grows

Benefits of containers:
1.Let you describe your configuration in a single file
2.Can run in isolated environments
3.Makes Local setup of OS projects a breeze
4.Makes installing auxiliary services/DBs easy

Inside docker:
As an application/full stack developer, you need to be comfortable with the following terminologies -

1.Docker Engine- Docker Engine is an open-source containerization technology that allows developers to package applications into container. Containers are standardized executable components combining application source code with the operating system (OS) libraries and dependencies required to run that code in any environment.

2.Docker CLI- The command line interface lets you talk to the docker engine and lets you start/stop/list containers

3.Docker registry- The docker registry is how Docker makes money. 
It is similar to github, but it lets you push images rather than sourcecode
Docker’s main registry - https://dockerhub.com/
Mongo image on docker registry - https://hub.docker.com/_/mongo

Docker Image
A Docker image is a lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.
Docker Container
A container is a running instance of an image. It encapsulates the application or service and its dependencies, running in an isolated environment.

Port mapping- eg.docker run -d -p 27018:27017 mongo

Common docker commands-
1.docker images- shows all the images you have on your machine
2.docker ps-shows all the containers you are running on your machine
3.docker run- lets you start a container
4.docker build- lets you build an image
5.docker push- lets you push your image to a registry
6.docker kill and docker exec

In order to delete an image eg. mongo, do docker rmi mongo --force

What is a Dockerfile
If you want to create an image from your own code, that you can push to dockerhub, you need to create a Dockerfile for your application.
A Dockerfile is a text document that contains all the commands a user could call on the command line to create an image.
How to write a dockerfile
A dockerfile has 2 parts
Base image
Bunch of commands that you run on the base image (to install dependencies like Node.js)
Let’s write our own Dockerfile
Let’s try to containerise this backend app - https://github.com/100xdevs-cohort-2/week-15-live-1
